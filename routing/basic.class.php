<?phpclass HackJob_Routing_Basic{	protected $middlewareStack;		protected $request;		protected function getMiddlewareStack()	{		if(is_null($this->middlewareStack))		{			$classNames = HackJob_Conf_Provider::get('MIDDLEWARES', array());						$this->middlewareStack = array();						foreach($classNames as $className)			{				$this->middlewareStack[] = new $className();			}		}				return $this->middlewareStack;	}		protected function traverseMiddlewareStackResponse(HackJob_Response_Base $response)	{		foreach(array_reverse($this->getMiddlewareStack()) as $middleware)		{			$response = $middleware->response($this->request, $response);		}				return $response;	}		protected function traverseMiddlewareStackRequest()	{		foreach($this->getMiddlewareStack() as $middleware)		{			$result = $middleware->request($this->request);			if($result instanceof HackJob_Response_Base)			{				return $result;			}			if($result instanceof HackJob_Request_Request)			{				$this->request = $result;			}		}				return $this->request;	}	public function delegate($requestUri)	{		$requestUri = preg_replace('%\?.+$%','',$requestUri);		$map = HackJob_Conf_Provider::get('ROUTING_MAP');		foreach($map as $regex => $class)		{			if(preg_match($regex, $requestUri, $matches))			{				if(is_array($class))				{					$className = $class[0];					$classMethod = $class[1];				}				else				{					$className = $class;					$classMethod = 'response';				}												$this->request = HackJob_Request_Request::getInstance();				$result = $this->traverseMiddlewareStackRequest();				if($result instanceof HackJob_Response_Base)				{					$response = $result;					break;				}				$instance = new $className($matches);					$response = $instance->$classMethod($this->request);				if($response instanceof HackJob_Response_Base)				{					break;				}			}		}				if(!isset($response) || !$response instanceof HackJob_Response_Base)		{			$response = new HackJob_Response_NotFound('');		}				$response = $this->traverseMiddlewareStackResponse($response);		return $response;	}}?>